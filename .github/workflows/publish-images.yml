name: Publish Containers

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    name: Build and push ${{ matrix.display_name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: inference
            display_name: inference service
            image: ghcr.io/${{ github.repository_owner }}/andy-inference-service
            make_target: push-inference-service
          - id: tokenizer
            display_name: tokenizer service
            image: ghcr.io/${{ github.repository_owner }}/andy-tokenizer-service
            make_target: push-tokenizer-service

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
          flavor: |
            latest=true

      - name: Build and push via Makefile
        if: github.event_name != 'pull_request'
        env:
          REGISTRY: ghcr.io/${{ github.repository_owner }}
          TAGS: ${{ steps.meta.outputs.tags }}
          LABELS: ${{ steps.meta.outputs.labels }}
        run: |
          TAG_LIST="$(printf '%s' "$TAGS" | tr '\n' ' ')"
          LABEL_LIST="$(printf '%s' "$LABELS" | tr '\n' ' ')"
          make ${{ matrix.make_target }} REGISTRY="$REGISTRY" TAGS="$TAG_LIST" LABELS="$LABEL_LIST"
