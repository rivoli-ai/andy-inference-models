# USAGE: docker-compose up --build
#
# See docs/DOCKER_COMPOSE_GUIDE.md for detailed comparison

services:
  # Model data container (acts as a volume source)
  model-assets:
    image: ghcr.io/rivoli-ai/andy-model-assets:v1
    container_name: model-assets
    # no need to run any command â€” it just holds the /models folder
    command: [ "true" ]
    restart: "no"
  
  # Python tokenizer service for accurate HuggingFace tokenization
  tokenizer-service:
    build:
      context: ./tokenizer-service
      dockerfile: Dockerfile
    container_name: tokenizer-service
    ports:
      - "8000:8000"
    volumes:
      # Mount config directory so tokenizer can read models.json
      - ./config:/app/config:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - promptguard-network

  # Main API service
  inference-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inference-service
    ports:
      - "5158:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - Logging__MaxLogSize=1000
      - ModelsConfigPath=/app/config/models.json
      - ModelConfiguration__TokenizerServiceUrl=http://tokenizer-service:8000
    volumes:
      # Mount config for easy updates
      - ./config:/app/config:ro
    restart: unless-stopped
    depends_on:
      tokenizer-service:
        condition: service_healthy
      model-assets:
        condition: service_started
    volumes_from:
      - model-assets
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - promptguard-network

networks:
  promptguard-network:
    driver: bridge
