"""
Script to download and convert GraphCodeBERT Solidity Vulnerability model to ONNX format
This script will:
1. Download the fine-tuned GraphCodeBERT model from HuggingFace
2. Convert it to ONNX format
3. Save the tokenizer (including tokenizer.json)
"""
import os
import sys
from pathlib import Path
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch

def convert_solidity_vulnerability_model():
    """Convert GraphCodeBERT Solidity Vulnerability model to ONNX format"""
    
    model_name = "angusleung100/GraphCodeBERT-Base-Solidity-Vulnerability"
    output_dir = Path("models/graphcodebert-solidity-vulnerability")
    
    print(f"Starting conversion for {model_name}")
    print(f"Output directory: {output_dir}")
    
    # Create output directory
    output_dir.mkdir(parents=True, exist_ok=True)
    
    try:
        # Step 1: Load tokenizer
        print("\n[1/4] Loading tokenizer...")
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        print("✓ Tokenizer loaded successfully")
        
        # Step 2: Save tokenizer (this will create tokenizer.json)
        print("\n[2/4] Saving tokenizer...")
        tokenizer.save_pretrained(output_dir)
        print(f"✓ Tokenizer saved to {output_dir}")
        
        # List saved tokenizer files
        tokenizer_files = list(output_dir.glob("tokenizer*")) + list(output_dir.glob("vocab*")) + list(output_dir.glob("merges*"))
        print("  Saved files:")
        for f in tokenizer_files:
            print(f"    - {f.name}")
        
        # Step 3: Load and convert model to ONNX
        print("\n[3/4] Loading classification model...")
        model = AutoModelForSequenceClassification.from_pretrained(model_name)
        model.eval()
        
        print("  Model info:")
        print(f"    - Number of labels: {model.config.num_labels}")
        print(f"    - Label mapping: {model.config.id2label if hasattr(model.config, 'id2label') else 'Not specified'}")
        
        # Step 4: Export to ONNX
        print("\n[4/4] Converting to ONNX format...")
        print("  This may take a few minutes...")
        
        # Create dummy input for export
        dummy_text = "contract Example { uint balance; }"
        dummy_input = tokenizer(dummy_text, return_tensors="pt", max_length=512, padding="max_length", truncation=True)
        
        # Export to ONNX
        onnx_path = output_dir / "model.onnx"
        
        with torch.no_grad():
            torch.onnx.export(
                model,
                (dummy_input['input_ids'], dummy_input['attention_mask']),
                onnx_path,
                input_names=['input_ids', 'attention_mask'],
                output_names=['logits'],
                dynamic_axes={
                    'input_ids': {0: 'batch_size', 1: 'sequence_length'},
                    'attention_mask': {0: 'batch_size', 1: 'sequence_length'},
                    'logits': {0: 'batch_size'}
                },
                opset_version=14,
                do_constant_folding=True,
                export_params=True
            )
        
        print(f"✓ Model converted and saved to {onnx_path}")
        
        # Save config
        model.config.save_pretrained(output_dir)
        print(f"✓ Configuration saved")
        
        # Summary
        print("\n" + "="*60)
        print("✓ CONVERSION COMPLETE!")
        print("="*60)
        print(f"\nModel files saved to: {output_dir.absolute()}")
        print("\nGenerated files:")
        for file in sorted(output_dir.glob("*")):
            if file.is_file():
                size = file.stat().st_size
                size_mb = size / (1024 * 1024)
                print(f"  - {file.name:<30} ({size_mb:>8.2f} MB)")
        
        print("\nModel Details:")
        print(f"  - Model ID: graphcodebert-solidity-vulnerability")
        print(f"  - Labels: SAFE (0), VULNERABLE (1)")
        print(f"  - Use Case: Solidity smart contract vulnerability detection")
        print(f"\nYou can now use this model with the Inference API!")
        
    except Exception as e:
        print(f"\n✗ Error during conversion: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    print("="*60)
    print("GraphCodeBERT Solidity Vulnerability Model Converter")
    print("="*60)
    convert_solidity_vulnerability_model()

